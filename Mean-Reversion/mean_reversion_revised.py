# -*- coding: utf-8 -*-
"""Copy of Mean Reversion Revised

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oRcbwDgPn61tavT2kRmt0hN65SgBvNEF

## Importing Packages
"""

# Import packages
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from   matplotlib.pyplot import figure
import seaborn as sns

import yfinance as yf

import statsmodels.tsa.stattools as ts
from   statsmodels.tsa.stattools import adfuller

import warnings
warnings.filterwarnings('ignore')

"""## Selecting Stock Data"""

# Obtain Stock Data
stock_list = ["AAPL", "BRK-B", "RITM", "JPM", "MSFT", "ULST", "BABA", "AMZN", "BAC", "KO",
              "KHC", "GM", "MCO", "GE", "BKR", "HPQ", "CVX", "JNJ", "KR", "MA", "T"]

stocks_data = pd.DataFrame()

for i in stock_list:
    stock = yf.download(i, start = "2022-03-31", end = "2023-03-31")
    stocks_data[f"{i}"] = stock["Adj Close"]

stocks_data = stocks_data.reset_index()

"""## Select Stock Pair"""

# Check the Correlation
corr = stocks_data.corr()

figure(figsize = (8, 6))
sns.heatmap(corr, annot = False, fmt = "g")

# Use this code chunk to change the equities
stock_1 = "MCO"
stock_2 = "MA"

# Double check the correlation
stock_data = stocks_data[["Date", stock_1, stock_2]]

stock_data.corr()

# Plot the Data
figure(figsize = (8, 6))

plt.plot(stock_data["Date"], stock_data[[stock_1, stock_2]])
plt.legend([stock_1, stock_2])
plt.title(f"Adj Close of {stock_1} and {stock_2}")
plt.show()

"""## Prepare for the Statistical Test"""

# Compute Spread and Plot Spread
stock_data["Spread"] = stock_data[stock_1] - stock_data[stock_2]

figure(figsize = (8, 6))
plt.plot(stock_data["Date"], stock_data["Spread"])
plt.show()

# Compute and plot the Price Ratio
stock_data["Ratio"] = stock_data[stock_1] / stock_data[stock_2] # price ratio

figure(figsize = (8, 6))
plt.plot(stock_data["Date"], stock_data["Ratio"])
plt.axhline(stock_data["Ratio"].mean(), color = "r")
plt.show()

"""## Testing Cointegration"""

# Check the Co-integration
result = ts.coint(stock_data[stock_1], stock_data[stock_2])

cointegration_t_statistic = result[0]

if result[1] < 0.05:  #p-val
    print(f"The p-value is {result[1]}. The cointegration test passes.")
else:
    print(f"The p-value is {result[1]}. The cointegration test does not pass.\nTry other tests.")

# Check the ADF test
stock1_ADF = adfuller(stock_data[stock_1])
stock2_ADF = adfuller(stock_data[stock_2])
Spread_ADF = adfuller(stock_data["Spread"])
Ratio_ADF = adfuller(stock_data["Ratio"])
print(f"The p-value for the ADF Test of {stock_1} is {stock1_ADF[1]}")
print(f"The p-value for the ADF Test of {stock_2} is {stock2_ADF[1]}")

# In this part, the code will automatically compare if the pair passes the ADF test
# and choose the Criterion (Spread or Ratio) with the smaller p-value

if Spread_ADF[1] < 0.05:
    print(f"The p-value for the ADF Test of Spread is {Spread_ADF[1]}. \n ---> Stationary. Passes.")
    if Ratio_ADF[1] < 0.05:
        print(f"The p-value for the ADF Test of Ratio is {Ratio_ADF[1]}. \n ---> Passes.")
        if Spread_ADF[1] < Ratio_ADF[1]:
            print("Use Spread for modelling.")
            Criterion = "Spread"
        else:
            print("Use Ratio for modelling.")
            Criterion = "Ratio"
    else:
        print(f"The p-value for the ADF Test of Ratio is {Ratio_ADF[1]}. \n ---> Fails.")
        print("Use Spread for modelling.")
        Criterion = "Spread"
else:
    print(f"The p-value for the ADF Test of Spread is {Spread_ADF[1]}. \n ---> Fails.")
    if Ratio_ADF[1] < 0.05:
        print(f"The p-value for the ADF Test of Ratio is {Ratio_ADF[1]}. \n ---> Passes.")
        print("Use Ratio for modelling.")
        Criterion = "Ratio"
    else:
        print(f"The p-value for the ADF Test of Ratio is {Ratio_ADF[1]}. \n ---> Fails.")
        print("Both fails the test.\nTry another pair of stocks")

"""## Implement Mean Reversion"""

# Turn data into zscore
stock_data[f"{Criterion}_Z"] = (stock_data[Criterion] - stock_data[Criterion].mean()) / stock_data[Criterion].std()

figure(figsize = (8, 6))
plt.plot(stock_data["Date"], stock_data[f"{Criterion}_Z"])
plt.axhline(stock_data[f"{Criterion}_Z"].mean(), color = "b")
plt.axhline(1.0, color = "r")
plt.axhline(1.25, color = "r", linestyle = "--")
plt.axhline(-1.0, color = "g")
plt.axhline(-1.25, color = "g", linestyle = "--")
plt.legend([f"Z Score of Ratio", "Mean", 1, 1.25, -1, -1.25])
plt.title(f"Z Score of {Criterion}")
plt.show()

# Compute Moving Average
stock_data[f"{Criterion}_mavg5"] = stock_data[Criterion].rolling(window = 5, center = False).mean()
stock_data[f"{Criterion}_mavg20"] = stock_data[Criterion].rolling(window = 20, center = False).mean()
stock_data["std_20"] = stock_data[Criterion].rolling(window = 20, center = False).std()
stock_data["zscore_20_5"] = (stock_data[f"{Criterion}_mavg5"] - stock_data[f"{Criterion}_mavg20"]) / stock_data["std_20"]

figure(figsize = (8, 6))
plt.plot(stock_data["Date"], stock_data[Criterion])
plt.plot(stock_data["Date"], stock_data[f"{Criterion}_mavg5"])
plt.plot(stock_data["Date"], stock_data[f"{Criterion}_mavg20"])
plt.legend([f"{Criterion} between {stock_1} and {stock_2}", f"{Criterion} 5-Day Moving Average", f"{Criterion} 20-Day Moving Average"])
plt.title(f"Moving Average and {Criterion}")
plt.show()

# Z Score and the signal lines
figure(figsize = (8, 6))
plt.plot(stock_data["Date"], stock_data["zscore_20_5"])
plt.axhline(stock_data["zscore_20_5"].mean(), color = "b")
plt.axhline(1.0, color = "r")
plt.axhline(1.25, color = "r", linestyle = "--")
plt.axhline(-1.0, color = "g")
plt.axhline(-1.25, color = "g", linestyle = "--")
plt.legend(["Z Score", "Mean", 1, 1.25, -1, -1.25])
plt.title(f"Z Score of 20 & 5 Days Moving Average of {Criterion}")
plt.show()

# Draw the Siganols
buy = stock_data.query("zscore_20_5< -1")
sell = stock_data.query("zscore_20_5 > 1")

# Uncomment the commented line to plot signal lines and signal points on the same plot
figure(figsize = (8, 6))
plt.plot(stock_data["Date"], stock_data[f"{Criterion}_Z"])
# plt.plot(stock_data["Date"], stock_data["zscore_20_5"], alpha = 0.5)
plt.scatter(buy["Date"], buy[f"{Criterion}_Z"], color='g', linestyle='None', marker='^')
plt.scatter(sell["Date"], sell[f"{Criterion}_Z"], color='r', linestyle='None', marker='^')
# plt.axhline(0, color = "b", alpha = 0.5)
# plt.axhline(1.0, color = "r", alpha = 0.5)
# plt.axhline(1.25, color = "r", linestyle = "--", alpha = 0.5)
# plt.axhline(-1.0, color = "g", alpha = 0.5)
# plt.axhline(-1.25, color = "g", linestyle = "--", alpha = 0.5)
plt.legend([f"{Criterion} between {stock_1} and {stock_2}", "Buy Signal", "Sell Signal"])
plt.title(f"Relationship between {stock_1} and {stock_2}")
plt.show()

